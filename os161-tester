#!/bin/bash

BIN_PATH=/cad2/ece344f/cs161/bin
TEST_PATH=/cad2/ece344f/os161-tester

# Set up the TEST_PATH for a non-install location.
BIN_PATH_CANON=$(readlink -f $BIN_PATH)
CUR_PATH_CANON=$(dirname $(readlink -f $BASH_SOURCE))
if [ $BIN_PATH_CANON != $CUR_PATH_CANON ]; then
    TEST_PATH=$CUR_PATH_CANON
    echo "Tester path is $TEST_PATH"
fi

#setup the path, making sure that our path is first
export PATH=$BIN_PATH:/usr/local/bin:/local/bin:/usr/bin:/bin

PROG=$(basename $0)

function usage() {
    echo "Usage: $PROG [-hmvV] [assignment_nr]" 1>&2;
    echo "           -h: show this message" 1>&2;
    echo "           -m: run marker" 1>&2;
    echo "           -v: verbose" 1>&2;
    echo "           -V: very verbose" 1>&2;
    echo "assignment_nr: If not specified, then all tests are run" 1>&2
    echo "               Otherwise, it must be 0, 1, 2 or 3" 1>&2;
    exit 1;
}

# getopts processing
while getopts "hmvV" ARG ; do
    if [ ${ARG} = 'v' ]; then
        if [ -z "$VERBOSE" ]; then
            VERBOSE=1;
        fi
    elif [ ${ARG} = 'V' ]; then
        VERBOSE=2
    elif [ ${ARG} = 'm' ]; then
        MARKER=1;
    elif [ ${ARG} = 'h' ]; then
        usage;
    else
        usage;
    fi
done

export OS161_TESTER_VERBOSE=$VERBOSE

shift $((OPTIND-1))

# by default, check all assignments
ASSIGNMENTS="0 1 2 3"

if [ $# -gt 1 ]; then
    usage;
fi

if [ $# -eq 1 ]; then
    if [ $1 != "0" -a $1 != "1" -a $1 != "2" -a $1 != "3" ]; then
        usage;
    fi
    # check only one assignment
    ASSIGNMENTS=$1
fi

SVN_REP=svn+ssh://ug131.eecg.utoronto.ca/svn
NR_REPS=39

# run tests for a given assignment
os161_tester() {
    ASSIGNMENT="$1"
    # make sure that we are in the correct OS161 root directory
    if [ ! -f kernel ]; then
        echo "$PROG: The os161 kernel executable does not exist in this directory. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi
    if [ ! -x kernel ]; then
        echo "$PROG: The os161 kernel executable in this directory is not executable. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi

    echo "Running tests for Assignment $ASSIGNMENT";
    for test in $TEST_PATH/testing-scripts/asst${ASSIGNMENT}*.py; do
        if [ -x $test ]; then
            echo "Running: $test kernel";
            $test kernel;
        fi
    done
    # if marker is set
    if [ -n "$MARKER" ]; then
        # if marking-scripts directory is owned by effective group ID
        if [ -G "$TEST_PATH/marking-scripts" ]; then
            for test in $TEST_PATH/marking-scripts/asst${ASSIGNMENT}*.py; do
                if [ -x $test ]; then
                    echo "Running: $test kernel";
                    $test kernel;
                fi
            done
        fi
    fi
    echo
}

# for students, this will dry run the marker, i.e., it will run the svn
# checkout, build, but then it will not run the marking scripts
os161_marker() {
    ASSIGNMENT="$1"
    # checkout each svn repo
    for i in $(seq -f "%03g" 1 ${NR_REPS}); do
        # do we have access to the repository? students will have access to only their repository
        if expr "$(groups)" : ".*os-$i" > /dev/null; then

    	    echo "Checking out repo for os-$i"
            # remember current dir
            pushd .
    
            # checkout repository
    	    SVN_PATH=$SVN_REP/os-$i/svn/tags/asst${ASSIGNMENT}-end
            /bin/rm -rf os-$i && mkdir -p os-$i && cd os-$i && svn co $SVN_PATH
    
            # make sure that the checkout is successful
            if [ $? -eq 0 ] ; then
                # compile os161
                BUILD_PATH=$(pwd)/root
                cd asst${ASSIGNMENT}-end
                ./configure --ostree=$BUILD_PATH && make -s
    
                # configure the kernel
                pushd kern/conf
                ./config ASST${ASSIGNMENT}
                popd
    
                # build the kernel
                cd kern/compile/ASST${ASSIGNMENT} && make -s depend && make -s && make -s install
                cd $BUILD_PATH && cp /cad2/ece344f/cs161/bin/sys161.conf.sample sys161.conf
    
                # run the tester
                os161_tester ${ASSIGNMENT} > ../../tester-${i}.out
            fi
            # pop back to top dir
            popd
            /bin/rm -rf os-$i
        fi
    done
}

for i in "$ASSIGNMENTS"; do
    if [ -z "$MARKER" ]; then
        # run tester directly
        os161_tester $i
    else
        # run the marker
        os161_marker $i > marker.out 2>&1
    fi
done

exit 0


