Index: testbin/sty/sty.c
===================================================================
--- testbin/sty/sty.c	(revision 16)
+++ testbin/sty/sty.c	(working copy)
@@ -7,12 +7,16 @@
  * are complete. It may be helpful for scheduler performance analysis.
  */
 
+#include <stdio.h>
+#include <stdlib.h>
 #include <unistd.h>
 #include <err.h>
 
 static char *hargv[2] = { (char *)"hog", NULL };
 
-#define MAXPROCS  6
+#define MAXPROCS        9
+#define DEFAULTPROCS    6
+
 static int pids[MAXPROCS], npids;
 
 static
@@ -35,10 +39,10 @@
 }
 
 static
-void
+int
 waitall(void)
 {
-	int i, status;
+	int i, status, n = 0;
 	for (i=0; i<npids; i++) {
 		if (waitpid(pids[i], &status, 0)<0) {
 			warn("waitpid for %d", pids[i]);
@@ -46,19 +50,52 @@
 		else if (status != 0) {
 			warnx("pid %d: exit %d", pids[i], status);
 		}
+		else {
+		    n++;
+		}
 	}
+	
+	return n;
 }
 
+static
+void 
+usage(void)
+{
+    printf("usage: sty [NUM]\n"
+           "  NUM: must be from 1 to 9 inclusive\n");
+    exit(1);
+}
+
 int
-main()
+main(int argc, const char *argv[])
 {
-	hog();
-	hog();
-	hog();
-	hog();
-	hog();
-	hog();
+    int nhogs = DEFAULTPROCS;
+    
+    if ( argc == 2 ) {
+        int tmp = atoi(argv[1]);
+        if ( tmp <= 0 || tmp > MAXPROCS ) {
+            usage();
+        }
+        nhogs = tmp;
+    } 
+    else if ( argc > 2 ) {
+        usage();
+    }
 
-	waitall();
+    while ( nhogs > 0 ) {
+	    hog();
+	    nhogs--;
+	}
+	nhogs = waitall();
+	
+	if ( nhogs == 0 ) {
+	    printf("who let the hogs out?!\n");
+	} else if ( nhogs == 1 ) {
+	    printf("one lonely hog went back in the pen.\n");
+	} else {
+	    printf("%d hogs are back in the pen.\n", nhogs);
+	}
+	
 	return 0;
 }
