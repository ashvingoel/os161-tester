#!/bin/bash

TESTER_PATH=$(dirname $(readlink -f $BASH_SOURCE))
. $TESTER_PATH/setup

# Top level directory
TOP_PATH=$TESTER_PATH/..

PROG=$(basename $0)

function usage() {
    echo "Usage: $PROG [-hvVm] [-s start] [-e end] lab_nr" 1>&2;
    echo "           -h: show this message" 1>&2;
    echo "           -v: verbose" 1>&2;
    echo "           -V: very verbose" 1>&2;
    echo "           -m: run marker" 1>&2;
    echo "     -s start: run marker starting from group 'start'" 1>&2;
    echo "       -e end: run marker until group 'end'" 1>&2;
    echo "assignment_nr: run test on lab number" 1>&2
    echo "               must be 0, 1, 2 or 3" 1>&2;
    exit 1;
}

# getopts processing
while getopts "hvVms:e:" ARG ; do
    if [ ${ARG} = 'v' ]; then
        if [ -z "$VERBOSE" ]; then
            VERBOSE=1;
        fi
    elif [ ${ARG} = 'V' ]; then
        VERBOSE=2
    elif [ ${ARG} = 'm' ]; then
        MARKER=1;
    elif [ ${ARG} = 's' ]; then
        if [ -z "$MARKER" ]; then
            usage;
        fi
        START=$OPTARG;
        if ! [[ "$START" =~ ^[0-9]+$ ]] ; then
            usage;
        fi
    elif [ ${ARG} = 'e' ]; then
        if [ -z "$MARKER" ]; then
            usage;
        fi
        END=$OPTARG;
        if ! [[ "$END" =~ ^[0-9]+$ ]] ; then
            usage;
        fi
    elif [ ${ARG} = 'h' ]; then
        usage;
    else
        usage;
    fi
done

export OS161_TESTER_VERBOSE=$VERBOSE

shift $((OPTIND-1))

if [ $# -ne 1 ]; then
    usage;
fi

if [ $1 != "0" -a $1 != "1" -a $1 != "2" -a $1 != "3" ]; then
    usage;
fi

NR=$1

# run tests for a given assignment
os161_tester() {
    NR="$1"
    # make sure that we are in the correct OS161 root directory
    if [ ! -f "kernel" ]; then
        echo "$PROG: The os161 kernel executable does not exist in this directory. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi
    if [ ! -x kernel ]; then
        echo "$PROG: The os161 kernel executable in this directory is not executable. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi
    # the testing scripts log the pexpect commands in this file
    if [ -f "os161-pexpect.log" ]; then
	    /bin/rm os161-pexpect.log
    fi
    # the testing scripts log marks in this file
    if [ -f "os161-mark.txt" ]; then
	    /bin/rm os161-mark.txt
    fi
    for test in ${TOP_PATH}/scripts/asst${NR}*.py; do
        if [ -x $test ]; then
            echo "Running: $test";
            $test;
            echo
        fi
    done
    # parse the marks file
    if [ -f "os161-mark.txt" ]; then
        awk -F "," 'BEGIN{total=0;mark=0}{total+=$2; mark+=$3}END{print "You received " mark " marks out of a total of " total " marks."}' os161-mark.txt
    fi
    return 0;
}

# this will run the marker, i.e., it will run the svn checkout, build, etc.,
# and then run the tester programs
os161_marker() {
    NR="$1"
    GROUP="$2"

    # get the user-level programs, and apply any patches
    tar -zxf ${TOP_PATH}/src/os161-1.11.tar.gz && cd os161-1.11
    for patch in ${TOP_PATH}/src/patch.*; do
        if [ -f "${patch}" ]; then
            patch -p0 < ${patch}
        fi
    done
    # remove the kern directory
    rm -rf kern

    # now checkout kern directory from repository
    SVN_PATH=$SVN_REP/os-${GROUP}/svn/tags/asst${NR}-end/kern
    svn co $SVN_PATH
    # make sure that the checkout is successful
    if [ $? -ne 0 ]; then
        echo "svn checkout was not successful" 1>&2;
        return 1;
    fi

    # compile os161
    BUILD_PATH=$(pwd)/../root

    ./configure --ostree=$BUILD_PATH && make -s

    # configure the kernel
    pushd kern/conf
    ./config ASST${NR}
    popd

    # build the kernel
    cd kern/compile/ASST${NR} && make -s depend && make -s && \
        make -s install

    # setup the correct config file
    cd $BUILD_PATH && \
        cp ${TOP_PATH}/src/sys161-asst${NR}.conf sys161.conf

    # run the tester
    os161_tester ${NR} > ../../os161-tester-${GROUP}.log
    if [ -f "os161-pexpect.log" ]; then
        /bin/cp os161-pexpect.log ../../os161-pexpect-${GROUP}.log
    else
        echo "os161-pexpect.log not found" 1>&2;
    fi
    if [ -f "os161-mark.txt" ]; then
        /bin/cp os161-mark.txt ../../os161-mark-${GROUP}.txt
    else
        echo "os161-mark.txt not found" 1>&2;
    fi
    return 0;
}

echo "Running tests for Assignment $NR";

if [ -z "$MARKER" ]; then
    # run tester directly
    echo "Output being sent to os161-pexpect.log, os161-mark.txt"
    os161_tester $NR
else
    # run the marker for each group
    for GROUP in $(seq -f "%03g" ${START} ${END}); do
        # do we have access to the repository?
        # students will have access to only their repository
        if expr "$(groups)" : ".*os-${GROUP}" > /dev/null; then
            echo -n "Output being sent to "
            echo -n "os161-pexpect-${GROUP}.log, os161-mark-${GROUP}.txt"
            echo "os161-tester-${GROUP}.log, os161-marker-${GROUP}.log"

            # remember current dir
            pushd .
            # create a new directory for the group
            /bin/rm -rf os-${GROUP} && mkdir -p os-${GROUP} && cd os-${GROUP}
            os161_marker $NR $GROUP > ../os161-marker-${GROUP}.log 2>&1
            # pop back to top dir
            popd
            /bin/rm -rf os-${GROUP}
        fi
    done
fi

exit 0


