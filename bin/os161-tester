#!/bin/bash

BIN_PATH=/cad2/ece344f/cs161/bin
TEST_PATH=/cad2/ece344f/os161-tester
# svn repo path
SVN_REP=svn+ssh://ug131.eecg.utoronto.ca/svn
# number of repositories, starting from 1
NR_REPS=39
# by default, check all assignments
ASSIGNMENTS="0 1 2 3"
TESTER_BIN_PATH=/cad2/ece344f/os161-tester/bin


# Set up the TEST_PATH for a non-install location.
TESTER_BIN_PATH_CANON=$(readlink -f $TESTER_BIN_PATH)
CUR_PATH_CANON=$(dirname $(readlink -f $BASH_SOURCE))
if [ $TESTER_BIN_PATH_CANON != $CUR_PATH_CANON ]; then
    TEST_PATH=$CUR_PATH_CANON/..
    echo "Tester path is $TEST_PATH"
fi

#setup the path, making sure that our path is first
export PATH=$BIN_PATH:/usr/local/bin:/local/bin:/usr/bin:/bin

PROG=$(basename $0)

function usage() {
    echo "Usage: $PROG [-hvVm] [-s start] [-e end] [assignment_nr]" 1>&2;
    echo "           -h: show this message" 1>&2;
    echo "           -v: verbose" 1>&2;
    echo "           -V: very verbose" 1>&2;
    echo "           -m: run marker" 1>&2;
    echo "     -s start: run marker starting from group 'start'" 1>&2;
    echo "       -e end: run marker until group 'end'" 1>&2;
    echo "assignment_nr: If not specified, then all tests are run" 1>&2
    echo "               Otherwise, it must be 0, 1, 2 or 3" 1>&2;
    exit 1;
}

# getopts processing
while getopts "hvVms:e:" ARG ; do
    if [ ${ARG} = 'v' ]; then
        if [ -z "$VERBOSE" ]; then
            VERBOSE=1;
        fi
    elif [ ${ARG} = 'V' ]; then
        VERBOSE=2
    elif [ ${ARG} = 'm' ]; then
        MARKER=1;
    elif [ ${ARG} = 's' ]; then
        if [ -z "$MARKER" ]; then
            usage;
        fi
        START=$OPTARG;
        if ! [[ "$START" =~ ^[0-9]+$ ]] ; then
            usage;
        fi
    elif [ ${ARG} = 'e' ]; then
        if [ -z "$MARKER" ]; then
            usage;
        fi
        END=$OPTARG;
        if ! [[ "$END" =~ ^[0-9]+$ ]] ; then
            usage;
        fi
    elif [ ${ARG} = 'h' ]; then
        usage;
    else
        usage;
    fi
done

export OS161_TESTER_VERBOSE=$VERBOSE

shift $((OPTIND-1))

if [ $# -gt 1 ]; then
    usage;
fi

if [ $# -eq 1 ]; then
    if [ $1 != "0" -a $1 != "1" -a $1 != "2" -a $1 != "3" ]; then
        usage;
    fi
    # check only one assignment
    ASSIGNMENTS=$1
fi

if [ -z "$START" ]; then
    START=1
fi

if [ -z "$END" ]; then
    END=$NR_REPS
fi
    
# run tests for a given assignment
os161_tester() {
    ASSIGNMENT="$1"
    # make sure that we are in the correct OS161 root directory
    if [ ! -f kernel ]; then
        echo "$PROG: The os161 kernel executable does not exist in this directory. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi
    if [ ! -x kernel ]; then
        echo "$PROG: The os161 kernel executable in this directory is not executable. Run this script from the OS161 root directory." 1>&2;
        return 1;
    fi

    if [ -e os161.log ]; then
	    /bin/rm os161.log
    fi

    if [ -e os161-mark.txt ]; then
	    /bin/rm os161-mark.txt
    fi

    echo "Running tests for Assignment $ASSIGNMENT";
    for test in $TEST_PATH/testing-scripts/asst${ASSIGNMENT}*.py; do
        if [ -x $test ]; then
            echo "Running: $test kernel";
            $test kernel;
        fi
    done

    # if marker is not set
    if [ -z "$MARKER" ]; then
        return
    fi

    # Run all the post install hooks
    if [ -x "$TEST_PATH/marking-scripts/asst${ASSIGNMENT}-post.sh" ]; then
	    echo "Running post install hooks"
	    $TEST_PATH/marking-scripts/asst${ASSIGNMENT}-post.sh ${BUILD_PATH} ${TEST_PATH}
    fi

    # run the marking scripts
    for test in $TEST_PATH/marking-scripts/asst${ASSIGNMENT}*.py; do
        if [ -x $test ]; then
            echo "Running: $test kernel";
            $test kernel;
        fi
    done
    echo
}

# for students, this will dry run the marker, i.e., it will run the svn
# checkout, build, but then it will not run the marking scripts
os161_marker() {
    ASSIGNMENT="$1"
    GROUP="$2"

    echo "Checking out repo for os-${GROUP}"
    # remember current dir
    pushd .
    
    # checkout repository
    SVN_PATH=$SVN_REP/os-${GROUP}/svn/tags/asst${ASSIGNMENT}-end
    /bin/rm -rf os-${GROUP} && mkdir -p os-${GROUP} && cd os-${GROUP} && svn co $SVN_PATH
    
    # make sure that the checkout is successful
    if [ $? -eq 0 ] ; then
        # compile os161
        BUILD_PATH=$(pwd)/root
        cd asst${ASSIGNMENT}-end

	# run the pre-install hooks
	if [ -x "$TEST_PATH/marking-scripts/asst${ASSIGNMENT}-pre.sh" ]; then
		echo "Running pre install hooks"
		$TEST_PATH/marking-scripts/asst${ASSIGNMENT}-pre.sh
	fi

        ./configure --ostree=$BUILD_PATH && make -s
    
        # configure the kernel
        pushd kern/conf
        ./config ASST${ASSIGNMENT}
        popd
    
        # build the kernel
        cd kern/compile/ASST${ASSIGNMENT} && make -s depend && make -s && make -s install

	#copy the correct config
        cd $BUILD_PATH && cp ${TEST_PATH}/sysconfig/sys161-asst${ASSIGNMENT}.conf sys161.conf
	echo "Setup ${TEST_PATH}/sysconfig/sys161-asst${ASSIGNMENT}.conf as the configuration"
        # run the tester
        os161_tester ${ASSIGNMENT} > ../../os161-tester-${GROUP}.log
        if [ -e "os161.log" ]; then
	    /bin/cp os161.log ../../os161-${GROUP}.log
        fi
        if [ -e "os161-mark.txt" ]; then
	    /bin/cp os161-mark.txt ../../os161-mark-${GROUP}.txt
        else
            echo "os161-mark.txt not found"
        fi
    fi

    # pop back to top dir
    popd
    /bin/rm -rf os-${GROUP}
}

for i in "$ASSIGNMENTS"; do
    if [ -z "$MARKER" ]; then
        # run tester directly
        os161_tester $i
    else
        # run the marker for each group
        for GROUP in $(seq -f "%03g" ${START} ${END}); do
            # do we have access to the repository? students will have access to only their repository
            if expr "$(groups)" : ".*os-${GROUP}" > /dev/null; then
                echo "Output being sent to os161-marker-${GROUP}.log, os161-tester-${GROUP}.log, os161-${GROUP}.log and os161-mark-${GROUP}.txt"
                os161_marker $i $GROUP > os161-marker-${GROUP}.log 2>&1
            fi
        done
    fi
done
exit 0


